const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs') // Ensure you are using bcryptjs consistently

const prisma = new PrismaClient()

async function main() {
    console.log('‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')

    // --- 1. Seed Users (Admin and Teacher) ---
    // Use a stronger salt round (e.g., 12) for better security
    const hashedAdminPassword = await bcrypt.hash('admin1234', 12)
    const hashedTeacherPassword = await bcrypt.hash('teacher1234', 12)

    // Upsert Admin User
    const adminUser = await prisma.user.upsert({
        where: { email: 'admin@example.com' },
        update: {
            name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö', // Update name if user exists
            password: hashedAdminPassword, // Update password just in case
            role: 'admin',
        },
        create: {
            name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
            email: 'admin@example.com',
            password: hashedAdminPassword,
            role: 'admin',
        },
    })
    console.log(`‚úÖ User 'admin@example.com' (ID: ${adminUser.id}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`)

    // Upsert Teacher User
    const teacherUser = await prisma.user.upsert({
        where: { email: 'teacher@example.com' },
        update: {
            name: '‡∏Ñ‡∏£‡∏π‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)', // Update name if user exists
            password: hashedTeacherPassword, // Update password just in case
            role: 'teacher',
        },
        create: {
            name: '‡∏Ñ‡∏£‡∏π‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)',
            email: 'teacher@example.com',
            password: hashedTeacherPassword,
            role: 'teacher',
            // Corrected: Use 'teacher' for one-to-one relationship instead of 'teachers'
            teacher: { // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏à‡∏≤‡∏Å 'teachers' ‡πÄ‡∏õ‡πá‡∏ô 'teacher'
                create: { name: '‡∏Ñ‡∏£‡∏π‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)' }
            }
        },
        // Corrected: Use 'teacher' in include statement
        include: { teacher: true } // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏à‡∏≤‡∏Å 'teachers' ‡πÄ‡∏õ‡πá‡∏ô 'teacher'
    })
    console.log(`‚úÖ User 'teacher@example.com' (ID: ${teacherUser.id}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`)

    // Get the ID of the created teacher from the `teacher` relation
    // Corrected: Access teacher.id directly if it's a single object (one-to-one)
    const seededTeacherId = teacherUser.teacher ? teacherUser.teacher.id : null; // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (seededTeacherId) {
        console.log(`‚úÖ Teacher record for '‡∏Ñ‡∏£‡∏π‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)' (ID: ${seededTeacherId}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`)
    } else {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Teacher record ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user 'teacher@example.com' ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Prisma schema ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`)
    }


    // --- 2. Seed Class Groups ---
    const classGroupsData = [
        { name: '‡∏°.1/1' },
        { name: '‡∏°.1/2' },
        { name: '‡∏°.2/1' },
        { name: '‡∏°.2/2' },
        { name: '‡∏°.3/1' },
        { name: '‡∏°.3/2' },
        { name: '‡∏°.4/1' },
        { name: '‡∏°.4/2' },
        { name: '‡∏°.5/1' },
        { name: '‡∏°.5/2' },
        { name: '‡∏°.6/1' },
        { name: '‡∏°.6/2' },
    ];

    const seededClassGroups = [];
    for (const data of classGroupsData) {
        const group = await prisma.classGroup.upsert({
            where: { name: data.name },
            update: {},
            create: data,
        });
        seededClassGroups.push(group);
        console.log(`‚úÖ ClassGroup '${group.name}' (ID: ${group.id}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`)
    }

    // --- 3. Seed Labs ---
    const labsData = [
        { name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 1' },
        { name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå 1' },
        { name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤' },
        { name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏ô‡∏ï‡∏£‡∏µ' },
        { name: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    ];

    const seededLabs = [];
    for (const data of labsData) {
        const lab = await prisma.lab.upsert({
            where: { name: data.name },
            update: {},
            create: data,
        });
        seededLabs.push(lab);
        console.log(`‚úÖ Lab '${lab.name}' (ID: ${lab.id}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`)
    }


    // --- 4. Seed Example Schedules (requires teacherId, labId, classGroupId) ---
    // Ensure you have at least one teacher, one lab, and one classGroup
    if (seededTeacherId && seededLabs.length > 0 && seededClassGroups.length > 0) {
        const exampleSchedules = [
            {
                subject: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì',
                time: '09:00 - 10:00',
                day: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
                teacherId: seededTeacherId,
                labId: seededLabs[0].id, // Use the first seeded lab
                classGroupId: seededClassGroups[0].id, // Use the first seeded class group
                userId: adminUser.id, // ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Schedule.userId ‡πÄ‡∏õ‡πá‡∏ô required
            },
            {
                subject: '‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤',
                time: '10:30 - 11:30',
                day: '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
                teacherId: seededTeacherId,
                labId: seededLabs[1].id, // Use the second seeded lab
                classGroupId: seededClassGroups[1].id, // Use the second seeded class group
                userId: adminUser.id,
            },
            {
                subject: '‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå',
                time: '13:00 - 14:00',
                day: '‡∏û‡∏∏‡∏ò',
                teacherId: seededTeacherId,
                labId: seededLabs[1].id,
                classGroupId: seededClassGroups[2].id,
                userId: adminUser.id,
            },
            {
                subject: '‡πÄ‡∏Ñ‡∏°‡∏µ',
                time: '14:30 - 15:30',
                day: '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
                teacherId: seededTeacherId,
                labId: seededLabs[1].id,
                classGroupId: seededClassGroups[3].id,
                userId: adminUser.id,
            },
            {
                subject: '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢',
                time: '10:00 - 11:00',
                day: '‡∏®‡∏∏‡∏Å‡∏£‡πå',
                teacherId: seededTeacherId,
                labId: seededLabs[2].id, // Example: Language Lab
                classGroupId: seededClassGroups[4].id,
                userId: adminUser.id,
            },
        ];

        for (const scheduleData of exampleSchedules) {
            try {
                await prisma.schedule.create({
                    data: scheduleData,
                });
                console.log(`‚úÖ Schedule for '${scheduleData.subject}' (‡∏Ñ‡∏£‡∏π: ${scheduleData.teacherId}, ‡∏´‡πâ‡∏≠‡∏á: ${scheduleData.labId}) ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`)
            } catch (e) {
                console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Schedule ‡πÑ‡∏î‡πâ (Subject: ${scheduleData.subject}): ${e.message}`);
                // This might happen if a unique constraint exists on schedule entries
            }
        }
    } else {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Schedule ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• teacher, lab, ‡∏´‡∏£‡∏∑‡∏≠ classGroup ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
    }

    console.log('üéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!')

}

// --- 5. Error Handling and Disconnection ---
main()
    .catch(async (e) => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Seed:', e)
        process.exit(1) // Exit with a non-zero code to indicate failure
    })
    .finally(async () => {
        await prisma.$disconnect() // Ensure Prisma client disconnects
        console.log('üîå Prisma client ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß')
    })
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with a one-to-one relationship to Teacher
model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  role        String     @default("teacher")

  // One-to-one relationship: a User can be linked to at most one Teacher profile
  teacher     Teacher?   @relation("UserToTeacher")
  
  schedules   Schedule[]
  accounts    Account[]
  sessions    Session[]
}

model Account {
  id                  Int       @id @default(autoincrement())
  userId              Int
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Teacher model with a unique one-to-one relationship to User
model Teacher {
  id          Int        @id @default(autoincrement())
  name        String     @unique // Enforce unique names for teachers
  userId      Int        @unique // Enforce one User per Teacher
  user        User       @relation("UserToTeacher", fields: [userId], references: [id])
  schedules   Schedule[]
}

model Student {
  id           Int          @id @default(autoincrement())
  name         String
  classGroupId Int?
  classGroup   ClassGroup?  @relation(fields: [classGroupId], references: [id])
  createdAt    DateTime     @default(now())
}

// Lab model with unique names
model Lab {
  id        Int        @id @default(autoincrement())
  name      String     @unique // Enforce unique names for labs
  schedules Schedule[]
}

// ClassGroup model with unique names
model ClassGroup {
  id        Int        @id @default(autoincrement())
  name      String     @unique // Enforce unique names for class groups
  students  Student[]
  schedules Schedule[]
}

// Schedule model with required relations
model Schedule {
  id           Int        @id @default(autoincrement())
  subject      String
  time         String
  day          String

  // These should be required if a schedule must have them.
  // Changed to required (Int) for stronger data integrity.
  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id])

  labId        Int
  lab          Lab        @relation(fields: [labId], references: [id])

  classGroupId Int        // Assume every schedule is for a class group
  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id])

  // A schedule must be associated with a user who created it
  userId       Int
  user         User       @relation(fields: [userId], references: [id])

  createdAt    DateTime   @default(now())
}
// prisma/schema.prisma

// Generator สำหรับ Prisma Client - ใช้สร้างไคลเอนต์ TypeScript/JavaScript สำหรับการติดต่อกับฐานข้อมูล
generator client {
  provider = "prisma-client-js"
}

// การกำหนดค่า Datasource - ระบุประเภทฐานข้อมูลและ URL การเชื่อมต่อ
datasource db {
  provider = "postgresql" // บอก Prisma ว่าจะเชื่อมต่อกับฐานข้อมูล PostgreSQL
  url      = env("DATABASE_URL") // URL การเชื่อมต่อดึงมาจากตัวแปรสภาพแวดล้อม DATABASE_URL
}

// โมเดล User: แสดงถึงผู้ใช้ในแอปพลิเคชันของคุณ รวมถึงรายละเอียดการยืนยันตัวตน
// มีความสัมพันธ์แบบ One-to-one กับ Teacher และ One-to-many กับ Schedules, Accounts และ Sessions
model User {
  id          Int      @id @default(autoincrement()) // ตัวระบุเฉพาะสำหรับผู้ใช้, เพิ่มขึ้นอัตโนมัติ
  name        String   // ชื่อผู้ใช้
  email       String   @unique // อีเมลผู้ใช้, ต้องไม่ซ้ำกัน
  password    String   // รหัสผ่านผู้ใช้ (ควรเป็นแฮชในแอปพลิเคชันจริง)
  role        String   @default("teacher") // บทบาทผู้ใช้, ค่าเริ่มต้นคือ "teacher"
  createdAt   DateTime @default(now()) // วันที่สร้างบันทึก
  updatedAt   DateTime @updatedAt // วันที่อัปเดตล่าสุด

  // ความสัมพันธ์:
  teacher     Teacher?  @relation("UserToTeacher") // ความสัมพันธ์แบบ One-to-one ที่เป็นทางเลือกกับโปรไฟล์ครู
  schedules   Schedule[] // ความสัมพันธ์แบบ One-to-many กับตารางเรียนที่ผู้ใช้สร้าง
  accounts    Account[] // ความสัมพันธ์แบบ One-to-many กับบัญชีผู้ใช้ (สำหรับ NextAuth)
  sessions    Session[] // ความสัมพันธ์แบบ One-to-many กับเซสชันผู้ใช้ (สำหรับ NextAuth)
  students    Student[] // ความสัมพันธ์แบบ One-to-many กับนักเรียนที่เกี่ยวข้องกับผู้ใช้นี้
}

// โมเดล Account: ใช้โดย NextAuth เพื่อเก็บรายละเอียดเกี่ยวกับบัญชีภายนอกที่เชื่อมโยงของผู้ใช้ (เช่น Google, GitHub)
model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      // Foreign key ที่เชื่อมโยงกับโมเดล User
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) // เชื่อมโยงกับโมเดล User; หาก User ถูกลบ, Accounts ที่เกี่ยวข้องก็จะถูกลบด้วย

  @@unique([provider, providerAccountId]) // รับประกันความไม่ซ้ำกันของ provider และ providerAccountId
}

// โมเดล Session: ใช้โดย NextAuth เพื่อจัดการเซสชันผู้ใช้
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique // โทเค็นเฉพาะสำหรับเซสชัน
  userId       Int      // Foreign key ที่เชื่อมโยงกับโมเดล User
  expires      DateTime // วันที่หมดอายุของเซสชัน

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // เชื่อมโยงกับโมเดล User; การลบแบบ Cascade ทำให้เซสชันถูกลบพร้อมผู้ใช้
}

// โมเดล VerificationToken: ใช้โดย NextAuth สำหรับการยืนยันอีเมลหรือลิงก์ Magic Link
model VerificationToken {
  identifier String
  token      String   @unique // โทเค็นเฉพาะสำหรับการยืนยัน
  expires    DateTime // วันที่หมดอายุของโทเค็น

  @@unique([identifier, token]) // รับประกันความไม่ซ้ำกันของ identifier และ token
}

// โมเดล Teacher: แสดงถึงโปรไฟล์ครู, เชื่อมโยงกับ User
model Teacher {
  id        Int        @id @default(autoincrement())
  name      String     @unique // ชื่อเฉพาะสำหรับครูแต่ละคน
  userId    Int        @unique // Foreign key ที่เชื่อมโยงกับ User ที่ไม่ซ้ำกัน; รับประกัน User หนึ่งคนต่อโปรไฟล์ Teacher หนึ่งโปรไฟล์
  user      User       @relation("UserToTeacher", fields: [userId], references: [id], onDelete: Cascade) // เชื่อมโยงกับโมเดล User; การลบแบบ Cascade
  schedules Schedule[] // ความสัมพันธ์แบบ One-to-many กับตารางเรียนที่ครูสอน
  bookings  Booking[]  // NEW: Back-relation for Booking model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt // วันที่อัปเดตล่าสุด
}

// โมเดล Student: แสดงถึงนักเรียน
model Student {
  id          Int         @id @default(autoincrement())
  name        String
  userId      Int         @unique // Foreign key to User
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade) // เชื่อมโยงกับ User; การลบแบบ Cascade
  classGroupId Int?       // Optional foreign key to a ClassGroup.
  classGroup  ClassGroup? @relation(fields: [classGroupId], references: [id]) // Optional link to a ClassGroup.
  createdAt   DateTime    @default(now()) // Timestamp when the student record was created.
  updatedAt   DateTime    @updatedAt // Added updatedAt field
}

// โมเดล Lab: แสดงถึงห้องปฏิบัติการ
model Lab {
  id        Int        @id @default(autoincrement())
  name      String     @unique // ชื่อเฉพาะสำหรับแต่ละห้องปฏิบัติการ
  schedules Schedule[] // ความสัมพันธ์แบบ One-to-many กับตารางเรียนที่จัดในห้องปฏิบัติการนี้
  bookings  Booking[]  // NEW: Back-relation for Booking model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt // Added updatedAt field
}

// โมเดล ClassGroup: แสดงถึงกลุ่มนักเรียน (เช่น ชั้นเรียน)
model ClassGroup {
  id        Int        @id @default(autoincrement())
  name      String     @unique // ชื่อเฉพาะสำหรับแต่ละกลุ่มชั้นเรียน
  students  Student[]  // ความสัมพันธ์แบบ One-to-many กับนักเรียนในกลุ่มนี้
  schedules Schedule[] // ความสัมพันธ์แบบ One-to-many กับตารางเรียนสำหรับกลุ่มนี้
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt // Added updatedAt field
}

// NEW: Grade model: Represents a level or grade (e.g., ม.1, ป.1)
model Grade {
  id        Int      @id @default(autoincrement()) // ใช้ Int @id @default(autoincrement()) เพื่อให้ตรงกับโมเดลอื่นๆ
  name      String   @unique // ชื่อระดับชั้น, ต้องไม่ซ้ำกัน (เช่น "ม.1")
  bookings  Booking[] // NEW: Back-relation for Booking model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW: TimeSlot model: Represents a time slot (e.g., "09:00-10:00")
model TimeSlot {
  id        Int      @id @default(autoincrement())
  time      String   @unique // The time string, e.g., "09:00-10:00"
  bookings  Booking[] // NEW: Back-relation for Booking model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Booking model: Represents a class schedule booking.
model Booking {
  id        Int      @id @default(autoincrement())
  teacherId Int      // Foreign key to Teacher
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  gradeId   Int      // Foreign key to Grade
  grade     Grade    @relation(fields: [gradeId], references: [id])
  roomId    Int      // Foreign key to Lab (which you use for Rooms)
  room      Lab      @relation(fields: [roomId], references: [id])
  timeSlotId Int     // Foreign key to TimeSlot
  timeSlot  TimeSlot @relation(fields: [timeSlotId], references: [id])

  date      String   // วันที่ของการจอง (เช่น "YYYY-MM-DD")
  status    String   @default("pending") // e.g., "pending", "approved", "rejected"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Schedule model: Represents a class schedule. (This seems to be a separate schedule, not booking)
// All relations (teacher, lab, classGroup, user) are required for a schedule.
model Schedule {
  id           Int        @id @default(autoincrement())
  subject      String     // Subject of the schedule.
  time         String     // Time of the schedule. (This 'time' is a direct string, not a foreign key to TimeSlot model)
  day          String     // Day of the schedule.

  teacherId    Int        // Foreign key to Teacher.
  teacher      Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade) // Links to Teacher; cascade delete.

  labId        Int        // Foreign key to Lab.
  lab          Lab        @relation(fields: [labId], references: [id], onDelete: Cascade) // Links to Lab; cascade delete.

  classGroupId Int        // Foreign key to ClassGroup.
  classGroup   ClassGroup @relation(fields: [classGroupId], references: [id], onDelete: Cascade) // Links to ClassGroup; cascade delete.

  userId       Int        // Foreign key to User (the user who created/owns this schedule).
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Links to User; cascade delete.

  createdAt    DateTime   @default(now()) // Timestamp when the schedule was created.
}
